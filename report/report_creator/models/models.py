# -*- coding: utf-8 -*-

from odoo import models, fields, api
import csv
import os, errno
from datetime import date,datetime, timedelta
import base64
import xlwt
from jinja2 import Environment
import pdfkit

class reportDefinition(models.Model):
    _name = "report.definition"
    
    name                = fields.Char(string="Report Name")
    query               = fields.Text(string="Report Query")
    export_fields       = fields.Text(string="Export Fields")
    export_as           = fields.Selection([("xls","XLS File"),("csv","CSV File"),("pdf","PDF File")])
    template_id         = fields.Many2one("report.template")
    test_html           =fields.Text(string="Test HTML")

    
    
    
    @api.multi
    def test_generate_report(self):
#         prepare the data
        format          =  "%Y-%m-%d"
        start_date      = datetime.strptime(str(date.today()), format) - timedelta(days=30)
        date_data       = {"start_date" : str(start_date), "end_date" : str(date.today())}        
        query           = str(self.query)%date_data
        self.env.cr.execute(query)
        results         = self.env.cr.dictfetchall()   
        export_fields   =      eval(self.export_fields)
        script_path   = os.path.dirname(os.path.abspath(__file__))        
        bootstrap_css = str(script_path)+"/html/bootstrap/bootstrap.min.css"
        
        
#         default header
        header="""
            <div class="px-4 py-4">
            <h2>Test %s</h2>
            </div>
        """%(self.name)
        
#         default body
        body = """
        <table class="table table-striped">  
          <tbody>
            {% for result in results %}                
            <tr>
                {% for rest in result %}
                  <td>{{rest}}</td>              
                {% endfor %}
            </tr>            
            {% endfor %}
          </tbody>
        </table>
                
"""

        template = {
                "title" : '',
                "body" : body,
                "header" : header,
                "footer" : ''
                }

#         check if it has own template and report pdf
        if self.template_id and self.export_as =="pdf": 
            template['header'] = self.template_id.header
            template['body'] = self.template_id.body
            template['footer'] = self.template_id.footer
            
        else :            
            data = []
            data.append(export_fields)
            for result in results :
                data_result = []
                for field in export_fields :
                    if field in result:
                        data_result.append(result[field])                    
                data.append(data_result)
            
            results = data
        
#         parameter that will be generated by jinja2    
        render_vars = {
            "results"       : results,            
            "title"         : self.name,
            
            }   
            
#         the main html
        HTML = """
                <!DOCTYPE html>
                <html>
                    <head>
                        <title>{{title}}</title>
                        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
                    </head>
                    <body>
                        <div class="px-4 py-4">                    
                            %(header)s
                            %(body)s
                            %(footer)s
                        </body>
                    </div>
                </html>
                """%(template)
        
#         get the result of html in string
        result_html = Environment().from_string(HTML).render(render_vars)
        
#         store the string html tag to the test_html field
        self.test_html = result_html
        
#         return url so it will redirect to this url
        return {
                'type': 'ir.actions.act_url',
                'name': 'report',
                'url': '/web/test?model=report.definition&id=%s'%(self.id)
            }
                

class reportTemplate(models.Model):
    _name = "report.template"
    
    name = fields.Char(string="name")
    header = fields.Text(string="Header")
    body = fields.Text(string="Body")
    footer = fields.Text(string="Footer")

    
class reportResult(models.Model):
    _name = "report.result"
    
    name            = fields.Many2one("report.definition",string="Report Name")
    attachment_file = fields.Binary("File",compute="_get_file_report")
    file_report_name= fields.Char(string ="File Report Name")
    path_file       = fields.Char(string="Path File") 
    date_generated  = fields.Date(string="Date Generated")
    
    
    
#     get the data from the server, not save it in database but in file system
    @api.one
    def _get_file_report(self):
        try :
            file = open(str(self.path_file), "rb")
            if file :        
                self.attachment_file = base64.b64encode(file.read())
        except:
            self.attachment_file = False
         
            
    #main function to call first    
    def generate_report(self,data):
        
        report_def_obj  = data["report_def_obj"]
        date_data       = {"start_date" : data["start_date"], "end_date" : data["end_date"]}        
        query           = str(report_def_obj.query)%date_data
        self.env.cr.execute(query)
        results         = self.env.cr.dictfetchall()
        export_fields   = eval(report_def_obj.export_fields)
        config          = self.env["res.config.settings"].sudo().get_path()
        file_store      = str(config["file_store"])
        file_store      = os.path.join(file_store,str(date.today()))
        
        
        
        result_data = self.create({"name" : int(report_def_obj.id),"date_generated": str(date.today())})
        
#         define data for generate
        data_rpt                    = {}
        data_rpt['file_store']      = file_store
        data_rpt['export_fields']   = export_fields
        data_rpt['result_id']       = result_data.id
        data_rpt['results']         = results
        data_rpt['report_def_obj']  = report_def_obj
        
#         create directory to store file report
        self.create_directory(data_rpt)
        
#         check the condition report
        if report_def_obj.export_as == "xls":
            path_file,report_name           = self.generate_xls(data_rpt)
        
        elif report_def_obj.export_as == "csv":
            path_file,report_name           = self.generate_csv(data_rpt)
        
        elif report_def_obj.export_as == "pdf":
            path_file,report_name           = self.generate_pdf(data_rpt)  
             
         
                 
        result_data.path_file           = str(path_file)
        result_data.file_report_name    = str(report_name)
        result_data.name                = int(report_def_obj.id)
          
                 
        
        
        
#     function create directory    
    def create_directory(self,data_rpt):
        
        if not os.path.exists(data_rpt['file_store']):            
            os.makedirs(data_rpt['file_store'])            
        else:
            print(str(os.path.exists(data_rpt['file_store'])) + " directory already exists")
            
    
#     function for generate csv file            
    def generate_csv(self,data_rpt):
        
        
#         store the all data in data list
        data = []
        data.append(data_rpt['export_fields'])        
        for result in data_rpt['results'] :
            data_result = []
            for field in data_rpt['export_fields'] :
                if field in result:
                    data_result.append(result[field])                    
            data.append(data_result)
            

#         define the name of the report and path to store it            
        report_name = data_rpt['report_def_obj'].name + '-' + str(date.today())+"-"+str(data_rpt['result_id'])+".csv"
        path_file = os.path.join(data_rpt['file_store'],report_name)
        
#         create csv file and store it in file system
        with open(path_file, 'w') as csvFile:
            writer = csv.writer(csvFile)
            writer.writerows(data)
        csvFile.close()
        
        return path_file,report_name
    
    
#     function for generate pdf file
    def generate_pdf(self,data_rpt):
        script_path   = os.path.dirname(os.path.abspath(__file__))        
        bootstrap_css = str(script_path)+"/html/bootstrap/bootstrap.min.css"        
        results       = data_rpt['results']
        
        template      = {
            "header"    : data_rpt['report_def_obj'].template_id.header,
            "body"      : data_rpt['report_def_obj'].template_id.body,
            "footer"    : data_rpt['report_def_obj'].template_id.footer            
            }
        
#         main html structure
        HTML = """
                <!DOCTYPE html>
                <html>
                    <head>
                        <title>{{title}}</title>
                        <link rel="stylesheet" href="{{bootstrap_css}}">
                    </head>
                    <body>
                        %(header)s
                        %(body)s
                        %(footer)s
                    </body>
                </html>
                """%(template)
        
        render_vars = {
            "results"       : data_rpt['results'],
            "bootstrap_css" : bootstrap_css,
            "title"         : data_rpt['report_def_obj'].name + '_' + str(date.today())
            
            }   
        
        result_html = Environment().from_string(HTML).render(render_vars)

        
#         define the name of the report and path to store it
        report_name = data_rpt['report_def_obj'].name + '_' + str(date.today())+"_"+str(data_rpt['result_id'])+".pdf"
        path_file = os.path.join(data_rpt['file_store'],report_name)
        
#         create pdf file and store it in file system
        pdfkit.from_string(result_html, path_file) 
        
        return path_file,report_name
    
    
#     function for generate xls file
    def generate_xls(self,data_rpt):
        
        wb = xlwt.Workbook()
        ws = wb.add_sheet(data_rpt['report_def_obj'].name)
        
#         store the all data in data list
        data = []
        data.append(data_rpt['export_fields']) 
        for result in data_rpt['results'] :
            data_result = []
            for field in data_rpt['export_fields'] :
                if field in result:
                    data_result.append(result[field])                    
            data.append(data_result)
        
#         write data in sheet xls 
        row = 0                
        for data_row in data :
            col = 0
            for data_col in data_row:
                ws.write(row, col, data_col)
                col += 1    
            row += 1
            
#         define the name of the report and path to store it    
        report_name = data_rpt['report_def_obj'].name + '_' + str(date.today())+"_"+str(data_rpt['result_id'])+".xls"
        path_file = os.path.join(data_rpt['file_store'],report_name)
        
#         save xls file
        wb.save(path_file)                
        return path_file,report_name
    
    
#     function for button download
    @api.multi
    def download_report(self):
        
        return {
        'type': 'ir.actions.act_url',
        'name': 'report',
        'url': '/web/content/report.result/%s/attachment_file/%s?download=true' %(self.id,self.file_report_name),
    }
        